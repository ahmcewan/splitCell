rm(dens)
dens
View(dat.sub)
dapi_dens <- density(edu_neg_pooled_dapi)
dapi_dens <- density(edu_neg_pooled_dapi$DAPI...Intensity.DAPI.Sum)
dapi_dens <- density(edu_neg_pooled_dapi$DAPI...Intensity.DAPI.Sum, na.rm=TRUE)
dapi_dens
plot(dapi_dens$y)
plot(max(dapi_dens$y))
plot(dapi_dens$y)
abline(v=dapi_dens$y)
abline(v=max(dapi_dens$y))
peak1 <- dapi_dens$x[dapi_dens$y == max(dapi_dens$y)]
plot(dapi_dens$y)
abline(v=max(dapi_dens$y))
abline(v=peak1)
peak1
abline(v=dapi_dens$x[which.max(dapi_dens$y)])
plot(dapi_dens$y)
abline(v=dapi_dens$x[which.max(dapi_dens$y)])
peak <- dapi_dens$x[which.max(dapi_dens$y)]
peak
peak <- dapi_dens[which.max(dapi_dens$y)]
peak
max(dapi_dens$y)
dapi_dens$x[dapi_dens==3.478657e-08]
dapi_dens$x[dapi_dens$y==3.478657e-08]
3.478657e-08
3.478657e-08 + 1
max(dapi_dens$y)
dapi_dens$x[dapi_dens$y==max(dapi_dens$y)]
dapi_dens$x[dapi_dens$y==min(dapi_dens$y)]
?which
dapi_dens$x[which(dapi_dens$y==min(dapi_dens$y))]
dapi_dens$x[which.max(dapi_dens$y)][1]
plot(dapi_dens$u)
plot(dapi_dens$y)
abline(v=dapi_dens$x[which.max(dapi_dens$y)][1])
abline(v=dapi_dens$x[which.max(dapi_dens$y)][2])
test <- dapi_dens$x[which.max(dapi_dens$y)]
test
dapi_dens$x[which(dapi_dens$y == max(dapi_dens$y))]
maxPeaks
test <- maxPeaks[dapi_dens$y]
test
test <-dapi_dens$y[maxPeaks]
test
max(dapi_dens$y[maxPeaks])
maxPeaks[max(dapi_dens$y[maxPeaks])]
which(max(dapi_dens$y[maxPeaks]))
which[maxPeaks(max(dapi_dens$y[maxPeaks]))]
maxPeaks[max(dapi_dens$y[maxPeaks])]
max(dapi_dens$y[maxPeaks])
match(max(dapi_dens$y[maxPeaks]),dapi_dens$y[maxPeaks]))
match(max(dapi_dens$y[maxPeaks]),dapi_dens$y[maxPeaks])
maxPeaks[2]
abline(v=133)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
dens
dapi_dens
localMinima(dapi_dens$y)
peak1
peak2
maxPeaks[match(max(dapi_dens$y[maxPeaks]),dapi_dens$y[maxPeaks])]
maxPeaks[match(max(dapi_dens$y[maxPeaks]),dapi_dens$y[maxPeaks]) + 1]
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
install.library(mixedtools)
install.packages("mixtools")
library(mixtools)
runApp('splitcellv3')
?normalmixEM
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
d <- edu_neg_pooled_dapi[,edu_neg_pooled_dapi$DAPI...Intensity.DAPI.Sum]
d <- edu_neg_pooled_dapi$DAPI...Intensity.DAPI.Sum
mixmdl = normalmixEM(na.omit(d))
mixmdl
mixmdl$ft
summary(mixmdl)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
install.packages("stat")
install.packages("stats")
install.packages("stats")
library(stats)
summary(mixmdl)
mixmdl = normalmixEM(na.omit(d))
library(mixtools)
mixmdl = normalmixEM(na.omit(d))
summary(mixmdl)
mixmdl$mu[1]
shiny::runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
install.packages("uniroot")
runApp('splitcellv3')
?uniroot
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
ui <- shinyUI(fluidPage(
mainPanel(
fileInput("files",label = h4("Upload"), multiple = TRUE, accept = c(".csv")),
fluidRow(column(3, uiOutput("edu")),
column(3, uiOutput("dapi")),
column(3, uiOutput("foci")),
column(3, uiOutput("dapi_int"))),
DT::dataTableOutput("userChoiceTbl", width = "50%"),
tags$b("Cells Selected:"),
verbatimTextOutput("selectedInfo"),
dataTableOutput("rawData"),
plotOutput("edu_plot"),
)
))
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
dapi_dens
dapi_dens$y
dapi_dens$x
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
reshape_columns <- function(x){
tmp <- x[colnames(x) %in% c("WellName", input$foci)]
tmp$id <- with(tmp, ave(rep(1, nrow(tmp)), WellName, FUN = seq_along))
tmp <- dcast(data = tmp,formula = id~WellName,fun.aggregate = sum,value.var = input$foci,fill=-1)
tmp[tmp == -1] <-  NA
tmp <- tmp[-1]
dat.g1 <- tmp[,order(names(tmp))]
return(dat.g1)
}
reshape_columns(dat.g1)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
library(downlaods)
library(downloads)
library(xlsx)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
t <- c(7,7,7,7,7,7)
unique(t)
t <- c(7,7,7,7,7,8)
unique(t)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('app')
runApp('app')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
dens$y
dapi_dens$x
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('app')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
View(dat.s)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?write.xlsx
runApp('app')
runApp('app')
?http_keepalive_timeout
http_keepalive_timeout
??http_keepalive_timeout
library(zip)
install.packages("zip")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?zip
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('splitcellv3')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
?density
runApp('splitcellv3')
View(dat)
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
shiny::runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
runApp('splitcellv3')
shiny::runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
shiny::runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
shiny::runApp('splitCell')
runApp('splitCell')
runApp('splitCell')
library(readr)
dd <- read_csv("~/Documents/INCELL_foci_intensity_number_automatedAnalysis_R/2018-08-01T185039Z[9833]H2b mask cy5[306462].result.B5[306456].Population - Nuclei[0].csv")
View(dd)
plot(dd$`Nuclei - Intensity Nucleus DAPI Mean`,dd$`Nuclei - Intensity Nucleus Cy5 Mean`)
dd <- dd[,c(9,10,11,12)]
dd.log <- log10(dd)
plot(dd.log$`Nuclei - Intensity Nucleus DAPI Sum`, dd.log$`Nuclei - Intensity Nucleus Cy5 Sum`)
density(dd$`Nuclei - Intensity Nucleus DAPI Sum`)
dens <- density(dd$`Nuclei - Intensity Nucleus DAPI Sum`)
plot(dens$x)
plot(dens)
dens2 <- density(dd$`Nuclei - Intensity Nucleus Cy5 Sum`)
plot(dens2)
dens2 <- density(dd.log$`Nuclei - Intensity Nucleus Cy5 Sum`)
plot(dens2)
dens <- density(dd.log$`Nuclei - Intensity Nucleus DAPI Sum`)
plot(dens)
